import { Component } from '@angular/core';

@Component({
  selector: 'app-cs-highlight-source',
  templateUrl: './cs-highlight-source.component.html',
})
export class CsHighlightSourceComponent {

  htmlSource = `
<p cs-highlight>
  &lt;p cs-highlight&gt;Move the mouse over this paragraph!&lt;/p&gt;
</p>
<p [cs-highlight]="'orange'">
  &lt;p [cs-highlight]="'orange'"&gt;Move the mouse over this paragraph!&lt;/p&gt;
</p>`;

  directiveSource = `
  import { Directive, ElementRef, HostListener, Input, HostBinding } from '@angular/core';
  
  /**
   * Directive to highlight a host element.<br>
   * Instead of using this directive, please highlight your HTML with CSS.
   * This directive is for demonstration purposes only.
   * It shows you how to use @HostBinding to bind to a style property on the host element.
   * @HostListener is used to listen to events generated by the host element.<br>
   * Usage: <e cs-highlight>content</e> to use the default highlight color.<br>
   * <e [cs-highlight]="color-expression">content></e> to use your own color.<br>
   * Where e is the name of your element.
   */
  @Directive({
    selector: '[cs-highlight]'
  })
  export class CsHighlightDirective {
    /**
     * The color to highlight.
     */
    @Input('cs-highlight') highlightColor: string;
  
    /**
     * Binds to the style.fontWeight DOM attribute of the host element we are highlighting.
     */
    @HostBinding('style.fontWeight') fontWeight = "normal";
    
    /**
     * Constructs this directive from the reference to the host element we are highlighting.
     * @param elementRef Reference to the host element.
     */
    constructor(private elementRef: ElementRef) {
    }
  
    /**
     * Highlights the host element when the mouse enters the element.
     */
    @HostListener('mouseenter') onMouseEnter() {
      this.highlight(this.highlightColor || 'yellow', "bold");
    }
    
    /**
     * Resets the highlight color when the mouse leaves the element.
     */
    @HostListener('mouseleave') onMouseLeave() {
      this.highlight(null, "normal");
    }
    
    /**
     * Sets the supplied color and fornt-weigth on the host element.
     * @param color The color to set on the host element.
     * @param fontWeight The font-weight to set on the host element.
     */
    private highlight(color: string, fontWeight: string) {
      this.elementRef.nativeElement.style.backgroundColor = color;
      this.fontWeight = fontWeight;
    }
  }`;

}
